// Generated from Grammar.g4 by ANTLR 4.4
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class GrammarLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__3=1, T__2=2, T__1=3, T__0=4, Num=5, Float=6, AddOp=7, SubOp=8, MultOp=9, 
		DivOp=10, ModOp=11, ExpOp=12, AssignOp=13, AddAssignOp=14, SubAssignOp=15, 
		IncOp=16, DecOp=17, LessOp=18, LessEqualOp=19, GreaterOp=20, GreaterEqualOp=21, 
		EqualOp=22, NotEqualOp=23, AndOp=24, OrOp=25, NotOp=26, OpenPar=27, ClosePar=28, 
		OpenBracket=29, CloseBracket=30, Separator=31, Terminator=32, OpenBrace=33, 
		CloseBrace=34, CommentBlock=35, VoidKey=36, MainKey=37, PrintKey=38, ScanKey=39, 
		IntKey=40, FloatKey=41, StringKey=42, CharKey=43, BooleanKey=44, ArrayKey=45, 
		PrintfKey=46, ScanfKey=47, IfKey=48, ElseKey=49, ElseIfKey=50, ForKey=51, 
		WhileKey=52, DoWhileKey=53, ReturnKey=54, NullKey=55, Var=56, Func=57, 
		Char=58, String=59, WS=60;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'", 
		"'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "':'", "';'", 
		"'<'"
	};
	public static final String[] ruleNames = {
		"T__3", "T__2", "T__1", "T__0", "Num", "Float", "AddOp", "SubOp", "MultOp", 
		"DivOp", "ModOp", "ExpOp", "AssignOp", "AddAssignOp", "SubAssignOp", "IncOp", 
		"DecOp", "LessOp", "LessEqualOp", "GreaterOp", "GreaterEqualOp", "EqualOp", 
		"NotEqualOp", "AndOp", "OrOp", "NotOp", "OpenPar", "ClosePar", "OpenBracket", 
		"CloseBracket", "Separator", "Terminator", "OpenBrace", "CloseBrace", 
		"CommentBlock", "VoidKey", "MainKey", "PrintKey", "ScanKey", "IntKey", 
		"FloatKey", "StringKey", "CharKey", "BooleanKey", "ArrayKey", "PrintfKey", 
		"ScanfKey", "IfKey", "ElseKey", "ElseIfKey", "ForKey", "WhileKey", "DoWhileKey", 
		"ReturnKey", "NullKey", "Var", "Func", "Char", "String", "WS"
	};


	public GrammarLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Grammar.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2>\u01b1\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\6\6\u0095\n\6\r\6\16\6\u0096\3\7\6\7\u009a"+
		"\n\7\r\7\16\7\u009b\3\7\3\7\6\7\u00a0\n\7\r\7\16\7\u00a1\3\7\3\7\5\7\u00a6"+
		"\n\7\3\7\6\7\u00a9\n\7\r\7\16\7\u00aa\5\7\u00ad\n\7\3\b\3\b\3\b\3\b\3"+
		"\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\24"+
		"\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31"+
		"\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37"+
		"\3\37\3 \3 \3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#"+
		"\3$\3$\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3("+
		"\3(\3(\3(\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3,\3,"+
		"\3,\3,\3,\3-\3-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3\60\3\60\3"+
		"\60\3\60\3\60\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3"+
		"\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3"+
		"\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3"+
		"8\38\38\38\38\38\38\38\39\69\u0194\n9\r9\169\u0195\3:\3:\3:\3:\3:\3:\7"+
		":\u019e\n:\f:\16:\u01a1\13:\3;\3;\3;\3;\3<\3<\3<\3<\3=\6=\u01ac\n=\r="+
		"\16=\u01ad\3=\3=\2\2>\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27"+
		"\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33"+
		"\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63"+
		"e\64g\65i\66k\67m8o9q:s;u<w=y>\3\2\6\3\2\62;\5\2C\\aac|\4\2C\\c|\6\2\13"+
		"\f\17\17\"\"))\u01b9\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2"+
		"\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3"+
		"\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2"+
		"\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2"+
		"\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2"+
		"\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2"+
		"\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q"+
		"\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2"+
		"\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2"+
		"\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w"+
		"\3\2\2\2\2y\3\2\2\2\3{\3\2\2\2\5}\3\2\2\2\7\u0081\3\2\2\2\t\u008b\3\2"+
		"\2\2\13\u0094\3\2\2\2\r\u0099\3\2\2\2\17\u00ae\3\2\2\2\21\u00b2\3\2\2"+
		"\2\23\u00b6\3\2\2\2\25\u00bb\3\2\2\2\27\u00c0\3\2\2\2\31\u00c9\3\2\2\2"+
		"\33\u00d0\3\2\2\2\35\u00d2\3\2\2\2\37\u00da\3\2\2\2!\u00e2\3\2\2\2#\u00e7"+
		"\3\2\2\2%\u00ec\3\2\2\2\'\u00ee\3\2\2\2)\u00f1\3\2\2\2+\u00f3\3\2\2\2"+
		"-\u00f6\3\2\2\2/\u00f9\3\2\2\2\61\u00fc\3\2\2\2\63\u00ff\3\2\2\2\65\u0102"+
		"\3\2\2\2\67\u0104\3\2\2\29\u0106\3\2\2\2;\u0108\3\2\2\2=\u010a\3\2\2\2"+
		"?\u010c\3\2\2\2A\u010e\3\2\2\2C\u0111\3\2\2\2E\u0118\3\2\2\2G\u011f\3"+
		"\2\2\2I\u0121\3\2\2\2K\u0128\3\2\2\2M\u012c\3\2\2\2O\u0132\3\2\2\2Q\u0137"+
		"\3\2\2\2S\u013d\3\2\2\2U\u0143\3\2\2\2W\u0149\3\2\2\2Y\u014e\3\2\2\2["+
		"\u0152\3\2\2\2]\u0159\3\2\2\2_\u015e\3\2\2\2a\u0163\3\2\2\2c\u0167\3\2"+
		"\2\2e\u016b\3\2\2\2g\u0172\3\2\2\2i\u017c\3\2\2\2k\u0180\3\2\2\2m\u0185"+
		"\3\2\2\2o\u018a\3\2\2\2q\u0193\3\2\2\2s\u0197\3\2\2\2u\u01a2\3\2\2\2w"+
		"\u01a6\3\2\2\2y\u01ab\3\2\2\2{|\7/\2\2|\4\3\2\2\2}~\7p\2\2~\177\7g\2\2"+
		"\177\u0080\7y\2\2\u0080\6\3\2\2\2\u0081\u0082\7p\2\2\u0082\u0083\7q\2"+
		"\2\u0083\u0084\7e\2\2\u0084\u0085\7v\2\2\u0085\u0086\7w\2\2\u0086\u0087"+
		"\7t\2\2\u0087\u0088\7p\2\2\u0088\u0089\7c\2\2\u0089\u008a\7n\2\2\u008a"+
		"\b\3\2\2\2\u008b\u008c\7f\2\2\u008c\u008d\7k\2\2\u008d\u008e\7w\2\2\u008e"+
		"\u008f\7t\2\2\u008f\u0090\7p\2\2\u0090\u0091\7c\2\2\u0091\u0092\7n\2\2"+
		"\u0092\n\3\2\2\2\u0093\u0095\t\2\2\2\u0094\u0093\3\2\2\2\u0095\u0096\3"+
		"\2\2\2\u0096\u0094\3\2\2\2\u0096\u0097\3\2\2\2\u0097\f\3\2\2\2\u0098\u009a"+
		"\t\2\2\2\u0099\u0098\3\2\2\2\u009a\u009b\3\2\2\2\u009b\u0099\3\2\2\2\u009b"+
		"\u009c\3\2\2\2\u009c\u009d\3\2\2\2\u009d\u009f\7\60\2\2\u009e\u00a0\t"+
		"\2\2\2\u009f\u009e\3\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u009f\3\2\2\2\u00a1"+
		"\u00a2\3\2\2\2\u00a2\u00ac\3\2\2\2\u00a3\u00a5\7g\2\2\u00a4\u00a6\7/\2"+
		"\2\u00a5\u00a4\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a8\3\2\2\2\u00a7\u00a9"+
		"\t\2\2\2\u00a8\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00a8\3\2\2\2\u00aa"+
		"\u00ab\3\2\2\2\u00ab\u00ad\3\2\2\2\u00ac\u00a3\3\2\2\2\u00ac\u00ad\3\2"+
		"\2\2\u00ad\16\3\2\2\2\u00ae\u00af\7c\2\2\u00af\u00b0\7t\2\2\u00b0\u00b1"+
		"\7h\2\2\u00b1\20\3\2\2\2\u00b2\u00b3\7u\2\2\u00b3\u00b4\7u\2\2\u00b4\u00b5"+
		"\7u\2\2\u00b5\22\3\2\2\2\u00b6\u00b7\7o\2\2\u00b7\u00b8\7g\2\2\u00b8\u00b9"+
		"\7q\2\2\u00b9\u00ba\7y\2\2\u00ba\24\3\2\2\2\u00bb\u00bc\7f\2\2\u00bc\u00bd"+
		"\7q\2\2\u00bd\u00be\7q\2\2\u00be\u00bf\7m\2\2\u00bf\26\3\2\2\2\u00c0\u00c1"+
		"\7o\2\2\u00c1\u00c2\7q\2\2\u00c2\u00c3\7q\2\2\u00c3\u00c4\7q\2\2\u00c4"+
		"\u00c5\7f\2\2\u00c5\u00c6\7w\2\2\u00c6\u00c7\7n\2\2\u00c7\u00c8\7q\2\2"+
		"\u00c8\30\3\2\2\2\u00c9\u00ca\7r\2\2\u00ca\u00cb\7q\2\2\u00cb\u00cc\7"+
		"y\2\2\u00cc\u00cd\7r\2\2\u00cd\u00ce\7q\2\2\u00ce\u00cf\7y\2\2\u00cf\32"+
		"\3\2\2\2\u00d0\u00d1\7?\2\2\u00d1\34\3\2\2\2\u00d2\u00d3\7c\2\2\u00d3"+
		"\u00d4\7t\2\2\u00d4\u00d5\7h\2\2\u00d5\u00d6\7v\2\2\u00d6\u00d7\7j\2\2"+
		"\u00d7\u00d8\7k\2\2\u00d8\u00d9\7u\2\2\u00d9\36\3\2\2\2\u00da\u00db\7"+
		"u\2\2\u00db\u00dc\7u\2\2\u00dc\u00dd\7u\2\2\u00dd\u00de\7v\2\2\u00de\u00df"+
		"\7j\2\2\u00df\u00e0\7k\2\2\u00e0\u00e1\7u\2\2\u00e1 \3\2\2\2\u00e2\u00e3"+
		"\7o\2\2\u00e3\u00e4\7c\2\2\u00e4\u00e5\7v\2\2\u00e5\u00e6\7g\2\2\u00e6"+
		"\"\3\2\2\2\u00e7\u00e8\7r\2\2\u00e8\u00e9\7t\2\2\u00e9\u00ea\7g\2\2\u00ea"+
		"\u00eb\7{\2\2\u00eb$\3\2\2\2\u00ec\u00ed\7>\2\2\u00ed&\3\2\2\2\u00ee\u00ef"+
		"\7>\2\2\u00ef\u00f0\7?\2\2\u00f0(\3\2\2\2\u00f1\u00f2\7@\2\2\u00f2*\3"+
		"\2\2\2\u00f3\u00f4\7@\2\2\u00f4\u00f5\7?\2\2\u00f5,\3\2\2\2\u00f6\u00f7"+
		"\7?\2\2\u00f7\u00f8\7?\2\2\u00f8.\3\2\2\2\u00f9\u00fa\7#\2\2\u00fa\u00fb"+
		"\7?\2\2\u00fb\60\3\2\2\2\u00fc\u00fd\7(\2\2\u00fd\u00fe\7(\2\2\u00fe\62"+
		"\3\2\2\2\u00ff\u0100\7~\2\2\u0100\u0101\7~\2\2\u0101\64\3\2\2\2\u0102"+
		"\u0103\7#\2\2\u0103\66\3\2\2\2\u0104\u0105\7*\2\2\u01058\3\2\2\2\u0106"+
		"\u0107\7+\2\2\u0107:\3\2\2\2\u0108\u0109\7]\2\2\u0109<\3\2\2\2\u010a\u010b"+
		"\7_\2\2\u010b>\3\2\2\2\u010c\u010d\7.\2\2\u010d@\3\2\2\2\u010e\u010f\7"+
		">\2\2\u010f\u0110\7\65\2\2\u0110B\3\2\2\2\u0111\u0112\7g\2\2\u0112\u0113"+
		"\7/\2\2\u0113\u0114\7y\2\2\u0114\u0115\7q\2\2\u0115\u0116\7t\2\2\u0116"+
		"\u0117\7o\2\2\u0117D\3\2\2\2\u0118\u0119\7h\2\2\u0119\u011a\7/\2\2\u011a"+
		"\u011b\7y\2\2\u011b\u011c\7q\2\2\u011c\u011d\7t\2\2\u011d\u011e\7o\2\2"+
		"\u011eF\3\2\2\2\u011f\u0120\7%\2\2\u0120H\3\2\2\2\u0121\u0122\7p\2\2\u0122"+
		"\u0123\7g\2\2\u0123\u0124\7w\2\2\u0124\u0125\7v\2\2\u0125\u0126\7g\2\2"+
		"\u0126\u0127\7t\2\2\u0127J\3\2\2\2\u0128\u0129\7|\2\2\u0129\u012a\7q\2"+
		"\2\u012a\u012b\7q\2\2\u012bL\3\2\2\2\u012c\u012d\7r\2\2\u012d\u012e\7"+
		"t\2\2\u012e\u012f\7k\2\2\u012f\u0130\7p\2\2\u0130\u0131\7v\2\2\u0131N"+
		"\3\2\2\2\u0132\u0133\7u\2\2\u0133\u0134\7e\2\2\u0134\u0135\7c\2\2\u0135"+
		"\u0136\7p\2\2\u0136P\3\2\2\2\u0137\u0138\7u\2\2\u0138\u0139\7j\2\2\u0139"+
		"\u013a\7g\2\2\u013a\u013b\7g\2\2\u013b\u013c\7r\2\2\u013cR\3\2\2\2\u013d"+
		"\u013e\7q\2\2\u013e\u013f\7v\2\2\u013f\u0140\7v\2\2\u0140\u0141\7g\2\2"+
		"\u0141\u0142\7t\2\2\u0142T\3\2\2\2\u0143\u0144\7u\2\2\u0144\u0145\7p\2"+
		"\2\u0145\u0146\7c\2\2\u0146\u0147\7m\2\2\u0147\u0148\7g\2\2\u0148V\3\2"+
		"\2\2\u0149\u014a\7y\2\2\u014a\u014b\7q\2\2\u014b\u014c\7t\2\2\u014c\u014d"+
		"\7o\2\2\u014dX\3\2\2\2\u014e\u014f\7d\2\2\u014f\u0150\7q\2\2\u0150\u0151"+
		"\7q\2\2\u0151Z\3\2\2\2\u0152\u0153\7u\2\2\u0153\u0154\7r\2\2\u0154\u0155"+
		"\7k\2\2\u0155\u0156\7f\2\2\u0156\u0157\7g\2\2\u0157\u0158\7t\2\2\u0158"+
		"\\\3\2\2\2\u0159\u015a\7r\2\2\u015a\u015b\7w\2\2\u015b\u015c\7t\2\2\u015c"+
		"\u015d\7t\2\2\u015d^\3\2\2\2\u015e\u015f\7t\2\2\u015f\u0160\7c\2\2\u0160"+
		"\u0161\7y\2\2\u0161\u0162\7t\2\2\u0162`\3\2\2\2\u0163\u0164\7f\2\2\u0164"+
		"\u0165\7q\2\2\u0165\u0166\7i\2\2\u0166b\3\2\2\2\u0167\u0168\7e\2\2\u0168"+
		"\u0169\7c\2\2\u0169\u016a\7v\2\2\u016ad\3\2\2\2\u016b\u016c\7e\2\2\u016c"+
		"\u016d\7c\2\2\u016d\u016e\7v\2\2\u016e\u016f\7f\2\2\u016f\u0170\7q\2\2"+
		"\u0170\u0171\7i\2\2\u0171f\3\2\2\2\u0172\u0173\7h\2\2\u0173\u0174\7q\2"+
		"\2\u0174\u0175\7q\2\2\u0175\u0176\7f\2\2\u0176\u0177\7e\2\2\u0177\u0178"+
		"\7j\2\2\u0178\u0179\7c\2\2\u0179\u017a\7k\2\2\u017a\u017b\7p\2\2\u017b"+
		"h\3\2\2\2\u017c\u017d\7t\2\2\u017d\u017e\7w\2\2\u017e\u017f\7p\2\2\u017f"+
		"j\3\2\2\2\u0180\u0181\7o\2\2\u0181\u0182\7q\2\2\u0182\u0183\7x\2\2\u0183"+
		"\u0184\7g\2\2\u0184l\3\2\2\2\u0185\u0186\7d\2\2\u0186\u0187\7c\2\2\u0187"+
		"\u0188\7e\2\2\u0188\u0189\7m\2\2\u0189n\3\2\2\2\u018a\u018b\7g\2\2\u018b"+
		"\u018c\7z\2\2\u018c\u018d\7v\2\2\u018d\u018e\7k\2\2\u018e\u018f\7p\2\2"+
		"\u018f\u0190\7e\2\2\u0190\u0191\7v\2\2\u0191p\3\2\2\2\u0192\u0194\t\3"+
		"\2\2\u0193\u0192\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0193\3\2\2\2\u0195"+
		"\u0196\3\2\2\2\u0196r\3\2\2\2\u0197\u0198\7h\2\2\u0198\u0199\7w\2\2\u0199"+
		"\u019a\7p\2\2\u019a\u019b\7e\2\2\u019b\u019f\3\2\2\2\u019c\u019e\t\4\2"+
		"\2\u019d\u019c\3\2\2\2\u019e\u01a1\3\2\2\2\u019f\u019d\3\2\2\2\u019f\u01a0"+
		"\3\2\2\2\u01a0t\3\2\2\2\u01a1\u019f\3\2\2\2\u01a2\u01a3\7b\2\2\u01a3\u01a4"+
		"\4\2\u0080\3\u01a4\u01a5\7b\2\2\u01a5v\3\2\2\2\u01a6\u01a7\7\u0080\2\2"+
		"\u01a7\u01a8\4\2\u0080\3\u01a8\u01a9\7\u0080\2\2\u01a9x\3\2\2\2\u01aa"+
		"\u01ac\t\5\2\2\u01ab\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ab\3\2"+
		"\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0\b=\2\2\u01b0"+
		"z\3\2\2\2\f\2\u0096\u009b\u00a1\u00a5\u00aa\u00ac\u0195\u019f\u01ad\3"+
		"\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}